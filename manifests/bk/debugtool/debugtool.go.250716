package debugtool

import (
    "bufio"
    "bytes"
    "fmt"
    "os"
    "os/exec"
    "path/filepath"
    "strings"

    "github.com/spf13/cobra"
)

func NewCommand() *cobra.Command {
    var outputDir, fqdn, cluster string
    var zipOutput bool

    cmd := &cobra.Command{
        Use:   "debugtool <namespace> <podname>",
        Short: "Query proxy-config outputs for a given pod",
        Args:  cobra.ExactArgs(2),
        RunE: func(cmd *cobra.Command, args []string) error {
            ns, pod := args[0], args[1]
            fullPodName := fmt.Sprintf("%s.%s", pod, ns)

            // Âª∫Á´ã summary Ê™îÊ°àÔºàÂ¶ÇÊåáÂÆöÔºâ
            var summaryFile *os.File
            var err error
            if outputDir != "" {
                os.MkdirAll(outputDir, 0755)
                summaryFilePath := filepath.Join(outputDir, "debug-summary.txt")
                summaryFile, err = os.Create(summaryFilePath)
                if err != nil {
                    return fmt.Errorf("failed to create summary file: %v", err)
                }
                defer summaryFile.Close()
            }

            // ‚úÖ Êñ∞Â¢û proxy-status Êü•Ë©¢
            fmt.Println("üîç Checking proxy status for selected pod...")

            proxyStatusCmd := exec.Command("istioctl", "proxy-status", "-n", ns)
            var proxyStatusOut bytes.Buffer
            proxyStatusCmd.Stdout = &proxyStatusOut
            proxyStatusCmd.Stderr = os.Stderr

            if err := proxyStatusCmd.Run(); err != nil {
                fmt.Printf("‚ö†Ô∏è  Failed to get proxy status: %v\n", err)
            } else {
                fmt.Println("üìå Proxy Status (filtered):")
                scanner := bufio.NewScanner(&proxyStatusOut)
                for scanner.Scan() {
                    line := scanner.Text()
                    if strings.Contains(line, pod) {
                        fmt.Println(line)
                        if summaryFile != nil {
                            summaryFile.WriteString(line + "\n")
                        }
                    }
                }
            }

            fmt.Println("üîç Fetching available clusters for selection...")
            clusterCmd := exec.Command("istioctl", "proxy-config", "cluster", "-n", ns, fullPodName)
            var out bytes.Buffer
            clusterCmd.Stdout = &out
            clusterCmd.Stderr = os.Stderr
            if err := clusterCmd.Run(); err != nil {
                return fmt.Errorf("failed to get clusters: %v", err)
            }

            type serviceEntry struct {
                FQDN string
                Port string
            }
            var options []serviceEntry
            scanner := bufio.NewScanner(&out)
            headerSkipped := false
            for scanner.Scan() {
                line := scanner.Text()
                fields := strings.Fields(line)
                if len(fields) < 5 {
                    continue
                }
                if !headerSkipped {
                    headerSkipped = true
                    continue
                }
                if fields[3] == "outbound" {
                    options = append(options, serviceEntry{FQDN: fields[0], Port: fields[1]})
                }
            }

            if len(options) == 0 {
                return fmt.Errorf("‚ùå no outbound clusters found")
            }

            fmt.Println("\nüìã Select one of the following outbound service targets:")
            for i, opt := range options {
                fmt.Printf("[%d] %s (port %s)\n", i+1, opt.FQDN, opt.Port)
            }

            fmt.Print("\nüî¢ Enter selection number: ")
            var sel int
            fmt.Scanln(&sel)

            if sel < 1 || sel > len(options) {
                return fmt.Errorf("invalid selection")
            }

            selected := options[sel-1]
            fqdn = selected.FQDN
            cluster = fmt.Sprintf("outbound|%s||%s", selected.Port, selected.FQDN)

            fmt.Printf("‚úÖ Selected FQDN: %s\n", fqdn)
            fmt.Printf("‚úÖ Using cluster: %s\n\n", cluster)

            cmds := []struct {
                args     []string
                jsonOut  bool
                filename string
            }{
                {[]string{"proxy-config", "cluster", "-n", ns, fullPodName}, false, ""},
                {[]string{"proxy-config", "listeners", fullPodName}, false, ""},
                {[]string{"proxy-config", "listeners", fullPodName, "--port", "15001", "-o", "json"}, true, "listeners-15001.json"},
                {[]string{"proxy-config", "cluster", fullPodName, "--fqdn", fqdn, "-o", "json"}, true, fmt.Sprintf("cluster-%s.json", strings.ReplaceAll(fqdn, ".", "_"))},
                {[]string{"proxy-config", "endpoints", fullPodName, "--cluster", cluster}, false, ""},
            }

            for _, c := range cmds {
                cmdStr := fmt.Sprintf(">>> istioctl %s\n", strings.Join(c.args, " "))
                fmt.Print(cmdStr)

                if summaryFile != nil {
                    summaryFile.WriteString(cmdStr)
                }

                sub := exec.Command("istioctl", c.args...)

                if c.jsonOut && outputDir != "" {
                    var buf bytes.Buffer
                    sub.Stdout = &buf
                    sub.Stderr = os.Stderr
                    if err := sub.Run(); err != nil {
                        fmt.Printf("‚ö†Ô∏è  Command failed: %v\n", err)
                        continue
                    }
                    path := filepath.Join(outputDir, c.filename)
                    if err := os.WriteFile(path, buf.Bytes(), 0644); err != nil {
                        fmt.Printf("‚ö†Ô∏è  Failed to write file: %v\n", err)
                    } else {
                        fmt.Printf("üíæ Output written to: %s\n", path)
                        if summaryFile != nil {
                            summaryFile.WriteString(fmt.Sprintf("‚úî Output written to: %s\n", path))
                        }
                    }
                } else {
                    sub.Stdout = os.Stdout
                    sub.Stderr = os.Stderr
                    _ = sub.Run()
                }
            }

            return nil
        },
    }

    cmd.Flags().StringVarP(&outputDir, "output-dir", "o", "", "Directory to save output and summary")
    cmd.Flags().StringVar(&fqdn, "fqdn", "", "Optional FQDN of target service")
    cmd.Flags().StringVar(&cluster, "cluster", "", "Optional cluster name")
    cmd.Flags().BoolVar(&zipOutput, "zip", false, "Zip the outputs (not yet implemented)")
    return cmd
}

